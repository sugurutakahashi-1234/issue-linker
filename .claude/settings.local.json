{
  "permissions": {
    "allow": [
      "Bash(play:*)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:vitest.dev)",
      "Bash(claude mcp:*)",
      "Bash(pnpm:*)",
      "Bash(pnpm -w:*)",
      "Bash(rm:*)",
      "Bash(ls:*)",
      "Bash(pnpm -w run test)",
      "Bash(pnpm -w run build)",
      "WebFetch(domain:playwright.dev)",
      "Bash(pnpm -w run lint:fix)",
      "Bash(pnpm -w run typecheck)",
      "Bash(pnpm lint:*)",
      "Bash(pnpm -w run lint)",
      "Bash(pnpm run check:*)",
      "Bash(pnpm -w run check)",
      "Bash(pnpm run:*)",
      "Bash(pnpm -w run clean:test)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm clean:test:*)",
      "Bash(gh:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git rev-parse:*)",
      "WebFetch(domain:docs.github.com)",
      "Bash(mv:*)",
      "Bash(git fetch:*)",
      "Bash(touch:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(done)",
      "WebFetch(domain:github.com)",
      "Bash(npx prisma:*)",
      "Bash(docker run:*)",
      "Bash(true)",
      "Bash(rg:*)",
      "Bash(git mv:*)",
      "Bash(grep:*)",
      "Bash(diff:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(npx changelogen:*)",
      "Bash(node:*)",
      "Bash(npx tsx:*)",
      "WebFetch(domain:git-cliff.org)",
      "Bash(pkill:*)",
      "Bash(npm view:*)",
      "Bash(cat:*)",
      "Bash(env)",
      "Bash(npm config ls:*)",
      "Bash(git rm:*)",
      "Bash(npx tsc:*)",
      "Bash(npx biome:*)",
      "Bash(npx playwright test:*)",
      "Bash(npx vitest:*)",
      "Bash(npx commitlint:*)",
      "Bash(npx:*)",
      "Bash(biome check:*)",
      "Bash(tree:*)",
      "Bash(git tag:*)",
      "Bash(tsc:*)",
      "Bash(npm run build:*)",
      "Bash(npm info:*)",
      "Bash(test:*)",
      "Bash(curl:*)",
      "WebFetch(domain:biomejs.dev)",
      "Bash(cp:*)",
      "Bash(git branch:*)",
      "Bash(docker compose:*)",
      "Bash(kill:*)",
      "Bash(git check-ignore:*)",
      "Bash(dotenv:*)",
      "WebFetch(domain:dotenvx.com)",
      "Bash(git reset:*)",
      "Bash(docker rm:*)",
      "Bash(git restore:*)",
      "Bash(hash -r)",
      "WebFetch(domain:heyapi.dev)",
      "WebFetch(domain:tailwindcss.com)",
      "Bash(open:*)",
      "Bash(chmod:*)",
      "WebFetch(domain:storybook.js.org)",
      "WebFetch(domain:openapi-ts.dev)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:tanstack.com)",
      "WebFetch(domain:reactrouter.com)",
      "WebFetch(domain:react-router-docs-ja.techtalk.jp)",
      "WebFetch(domain:ui.shadcn.com)",
      "WebFetch(domain:www.heroui.com)",
      "WebFetch(domain:zenn.dev)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_tab_new",
      "mcp__playwright__browser_console_messages",
      "Bash(bun:*)",
      "Bash(bun run:*)",
      "Bash(bun install:*)",
      "Bash(bun add:*)",
      "Bash(npm install)",
      "WebFetch(domain:bun.sh)",
      "WebFetch(domain:knip.dev)",
      "Bash(timeout:*)",
      "Bash(vite build:*)",
      "WebFetch(domain:vite.dev)",
      "WebFetch(domain:ja.vite.dev)",
      "Bash(npm test:*)",
      "Bash(git merge:*)",
      "WebFetch(domain:goreleaser.com)",
      "WebFetch(domain:docs.brew.sh)",
      "Bash(brew list:*)",
      "Bash(npm link:*)",
      "Bash(sed:*)",
      "Bash(./dist/cli.js:*)",
      "Bash(NO_COLOR=1 bun test --coverage)",
      "Bash(/dev/null)",
      "Bash(NO_COLOR=1 bun test)",
      "Bash(knip:*)",
      "Bash(git log:*)",
      "Bash(./node_modules/.bin/tsc)",
      "WebFetch(domain:zod.dev)",
      "Bash(jq:*)",
      "WebFetch(domain:bundlephobia.com)",
      "Bash(npm search:*)",
      "Bash(tsuml2:*)",
      "WebFetch(domain:tj.github.io)",
      "Bash(git --help)",
      "Bash(npm:*)",
      "WebFetch(domain:help.openai.com)",
      "WebFetch(domain:support.anthropic.com)",
      "WebFetch(domain:docs.renovatebot.com)",
      "WebFetch(domain:nodejs.org)",
      "WebFetch(domain:valibot.dev)",
      "Bash(mermaid-markdown-wrap:*)",
      "Bash(./dist/mmw:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(tar:*)",
      "Bash(git cherry-pick:*)",
      "Bash(act:*)",
      "Bash(../dist/presentation/cli.js init --yes)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(git add:*)",
      "Bash(git submodule add:*)",
      "Bash(git submodule:*)",
      "Bash(git init:*)",
      "Bash(bash:*)",
      "Bash(git-branch-lint:*)",
      "Bash(tsg:*)",
      "Bash(ncc build:*)",
      "Bash(concurrently:*)",
      "Bash(git remote get-url:*)",
      "Bash(biome:*)",
      "Bash(time bun run:*)",
      "Bash(do time bun run ./src/cli.ts --branch \"feat/issue-3-test\" --repo \"sugurutakahashi-1234/issue-number-branch\")",
      "Bash(time bun test:*)",
      "Bash(do echo \"=== Checking $scope ===\")",
      "Bash(git ls-tree:*)",
      "Bash(GITHUB_TOKEN=\"\" GH_TOKEN=\"\" bun run src/cli.ts --text \"Fix #123\" --repo \"owner/repo\")",
      "Bash(DEBUG_TOKEN_SOURCE=1 GITHUB_TOKEN=\"\" GH_TOKEN=\"\" bun run src/cli.ts --text \"Fix #123\" --repo \"owner/repo\")",
      "Bash(-e 's/result\\.issueNumbers/result.issues?.found/g' )",
      "Bash(-e 's/result\\.validIssues/result.issues?.valid/g' )",
      "Bash(-e 's/result\\.invalidIssues\\]/\\(result.issues?.notFound || []).concat(result.issues?.wrongState || [])\\]/g' )",
      "Bash(-e 's/result\\.notFoundIssues/result.issues?.notFound/g' )",
      "Bash(-e 's/result\\.wrongStateIssues/result.issues?.wrongState/g' )",
      "Bash(-e 's/expect(result\\.excluded)\\.toBe(true)/expect(result.reason).toBe(\"\"excluded\"\")/g' )",
      "Bash(-e 's/expect(result\\.excluded)\\.toBe(false)/expect(result.reason).not.toBe(\"\"excluded\"\")/g' )",
      "Bash(-e 's/result\\.metadata\\.mode/result.input.mode/g' )",
      "Bash(-e 's/result\\.metadata\\.repo/result.input.repo/g' )",
      "Bash(src/application/check-message-use-case.test.ts)",
      "Bash(-e 's/expect(result\\.invalidIssues)\\.toEqual(\\[\\([^]]*\\)\\])/expect([...(result.issues?.notFound || []), ...(result.issues?.wrongState || [])]).toEqual([\\1])/g' )",
      "Bash(/Users/sugurutakahashi/git/issue-linker/packages/core/src/application/check-message-use-case.test.ts)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "playwright"
  ]
}